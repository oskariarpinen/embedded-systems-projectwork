
Mega-project-work.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000cca  2**0
                  ALLOC, LOAD, DATA
  1 .text         0000028e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800200  00800200  00000cca  2**0
                  ALLOC
  3 .comment      0000005b  00000000  00000000  00000cca  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000d25  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000019b7  00000000  00000000  00000dad  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000f2b  00000000  00000000  00002764  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007b7  00000000  00000000  0000368f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  00003e48  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000430  00000000  00000000  00003f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000630  00000000  00000000  00004378  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  000049a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000bf4  00000bf4  00000ca8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004a10  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.keypad_ScanKey 00000030  00000b3a  00000b3a  00000bee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.KEYPAD_Init 00000008  00000bec  00000bec  00000ca0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.KEYPAD_GetKey 0000006e  00000a58  00000a58  00000b0c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.USART_init 0000001e  00000b94  00000b94  00000c48  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.USART_Transmit 0000000e  00000bc2  00000bc2  00000c76  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.USART_Receive 0000000e  00000bd0  00000bd0  00000c84  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.input_password 000000d6  0000084e  0000084e  00000902  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.compare_passwords 0000003c  00000ac6  00000ac6  00000b7a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .progmemx.data 00000038  0000028e  0000028e  00000342  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 23 .text.main    00000138  00000716  00000716  000007ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .data.uart_input 0000000f  0080020a  00000bf8  00000cac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 25 .data.uart_output 0000000f  00800219  00000c07  00000cbb  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 26 .bss.g_STATE  00000001  00800228  00800228  00000cca  2**0
                  ALLOC
 27 .text.libgcc  00000010  00000bb2  00000bb2  00000c66  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.avrlibc 0000002a  00000b6a  00000b6a  00000c1e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.avrlibc 00000450  000002c6  000002c6  0000037a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.avrlibc 00000038  00000b02  00000b02  00000bb6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.avrlibc 00000078  000009e0  000009e0  00000a94  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.avrlibc 000000bc  00000924  00000924  000009d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.libgcc  0000000e  00000bde  00000bde  00000c92  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 19 01 	jmp	0x232	; 0x232 <__ctors_end>
   4:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__bad_interrupt>
   8:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__bad_interrupt>
   c:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__bad_interrupt>
  10:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__bad_interrupt>
  14:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__bad_interrupt>
  18:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__bad_interrupt>
  1c:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__bad_interrupt>
  20:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__bad_interrupt>
  24:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__bad_interrupt>
  28:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__bad_interrupt>
  2c:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__bad_interrupt>
  30:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__bad_interrupt>
  34:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__bad_interrupt>
  38:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__bad_interrupt>
  3c:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__bad_interrupt>
  40:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__bad_interrupt>
  44:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__bad_interrupt>
  48:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__bad_interrupt>
  4c:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__bad_interrupt>
  50:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__bad_interrupt>
  54:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__bad_interrupt>
  58:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__bad_interrupt>
  5c:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__bad_interrupt>
  60:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__bad_interrupt>
  64:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__bad_interrupt>
  68:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__bad_interrupt>
  6c:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__bad_interrupt>
  70:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__bad_interrupt>
  74:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__bad_interrupt>
  78:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__bad_interrupt>
  7c:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__bad_interrupt>
  80:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__bad_interrupt>
  84:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__bad_interrupt>
  88:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__bad_interrupt>
  8c:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__bad_interrupt>
  90:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__bad_interrupt>
  94:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__bad_interrupt>
  98:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__bad_interrupt>
  9c:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__bad_interrupt>
  a0:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__bad_interrupt>
  a4:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__bad_interrupt>
  a8:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__bad_interrupt>
  ac:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__bad_interrupt>
  b0:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__bad_interrupt>
  b4:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__bad_interrupt>
  b8:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__bad_interrupt>
  bc:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__bad_interrupt>
  c0:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__bad_interrupt>
  c4:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__bad_interrupt>
  c8:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__bad_interrupt>
  cc:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__bad_interrupt>
  d0:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__bad_interrupt>
  d4:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__bad_interrupt>
  d8:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__bad_interrupt>
  dc:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__bad_interrupt>
  e0:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__bad_interrupt>
  e4:	57 05       	cpc	r21, r7
  e6:	5f 05       	cpc	r21, r15
  e8:	5f 05       	cpc	r21, r15
  ea:	5f 05       	cpc	r21, r15
  ec:	59 05       	cpc	r21, r9
  ee:	5f 05       	cpc	r21, r15
  f0:	5b 05       	cpc	r21, r11
  f2:	5d 05       	cpc	r21, r13
  f4:	5f 05       	cpc	r21, r15
  f6:	5f 05       	cpc	r21, r15
  f8:	5f 05       	cpc	r21, r15
  fa:	5f 05       	cpc	r21, r15
  fc:	5f 05       	cpc	r21, r15
  fe:	5f 05       	cpc	r21, r15
 100:	5f 05       	cpc	r21, r15
 102:	5f 05       	cpc	r21, r15
 104:	5f 05       	cpc	r21, r15
 106:	5f 05       	cpc	r21, r15
 108:	5f 05       	cpc	r21, r15
 10a:	5f 05       	cpc	r21, r15
 10c:	5f 05       	cpc	r21, r15
 10e:	5f 05       	cpc	r21, r15
 110:	5f 05       	cpc	r21, r15
 112:	5f 05       	cpc	r21, r15
 114:	5f 05       	cpc	r21, r15
 116:	5f 05       	cpc	r21, r15
 118:	5f 05       	cpc	r21, r15
 11a:	5f 05       	cpc	r21, r15
 11c:	5f 05       	cpc	r21, r15
 11e:	5f 05       	cpc	r21, r15
 120:	5f 05       	cpc	r21, r15
 122:	5f 05       	cpc	r21, r15
 124:	5f 05       	cpc	r21, r15
 126:	5f 05       	cpc	r21, r15
 128:	5f 05       	cpc	r21, r15
 12a:	5f 05       	cpc	r21, r15
 12c:	5f 05       	cpc	r21, r15
 12e:	5f 05       	cpc	r21, r15
 130:	5f 05       	cpc	r21, r15
 132:	5f 05       	cpc	r21, r15
 134:	5f 05       	cpc	r21, r15
 136:	5f 05       	cpc	r21, r15
 138:	5f 05       	cpc	r21, r15
 13a:	5f 05       	cpc	r21, r15
 13c:	5f 05       	cpc	r21, r15
 13e:	5f 05       	cpc	r21, r15
 140:	5f 05       	cpc	r21, r15
 142:	5f 05       	cpc	r21, r15
 144:	5f 05       	cpc	r21, r15
 146:	5f 05       	cpc	r21, r15
 148:	5f 05       	cpc	r21, r15
 14a:	5f 05       	cpc	r21, r15
 14c:	5f 05       	cpc	r21, r15
 14e:	5f 05       	cpc	r21, r15
 150:	5f 05       	cpc	r21, r15
 152:	5f 05       	cpc	r21, r15
 154:	5f 05       	cpc	r21, r15
 156:	5f 05       	cpc	r21, r15
 158:	5f 05       	cpc	r21, r15
 15a:	5f 05       	cpc	r21, r15
 15c:	5f 05       	cpc	r21, r15
 15e:	5f 05       	cpc	r21, r15
 160:	5f 05       	cpc	r21, r15
 162:	5f 05       	cpc	r21, r15
 164:	4f 05       	cpc	r20, r15
 166:	5f 05       	cpc	r21, r15
 168:	5f 05       	cpc	r21, r15
 16a:	5f 05       	cpc	r21, r15
 16c:	51 05       	cpc	r21, r1
 16e:	5f 05       	cpc	r21, r15
 170:	53 05       	cpc	r21, r3
 172:	55 05       	cpc	r21, r5
 174:	5f 05       	cpc	r21, r15
 176:	5f 05       	cpc	r21, r15
 178:	5f 05       	cpc	r21, r15
 17a:	5f 05       	cpc	r21, r15
 17c:	5f 05       	cpc	r21, r15
 17e:	5f 05       	cpc	r21, r15
 180:	5f 05       	cpc	r21, r15
 182:	5f 05       	cpc	r21, r15
 184:	5f 05       	cpc	r21, r15
 186:	5f 05       	cpc	r21, r15
 188:	5f 05       	cpc	r21, r15
 18a:	5f 05       	cpc	r21, r15
 18c:	5f 05       	cpc	r21, r15
 18e:	5f 05       	cpc	r21, r15
 190:	5f 05       	cpc	r21, r15
 192:	5f 05       	cpc	r21, r15
 194:	5f 05       	cpc	r21, r15
 196:	5f 05       	cpc	r21, r15
 198:	5f 05       	cpc	r21, r15
 19a:	5f 05       	cpc	r21, r15
 19c:	5f 05       	cpc	r21, r15
 19e:	5f 05       	cpc	r21, r15
 1a0:	5f 05       	cpc	r21, r15
 1a2:	5f 05       	cpc	r21, r15
 1a4:	47 05       	cpc	r20, r7
 1a6:	5f 05       	cpc	r21, r15
 1a8:	5f 05       	cpc	r21, r15
 1aa:	5f 05       	cpc	r21, r15
 1ac:	49 05       	cpc	r20, r9
 1ae:	5f 05       	cpc	r21, r15
 1b0:	4b 05       	cpc	r20, r11
 1b2:	4d 05       	cpc	r20, r13
 1b4:	5f 05       	cpc	r21, r15
 1b6:	5f 05       	cpc	r21, r15
 1b8:	5f 05       	cpc	r21, r15
 1ba:	5f 05       	cpc	r21, r15
 1bc:	5f 05       	cpc	r21, r15
 1be:	5f 05       	cpc	r21, r15
 1c0:	5f 05       	cpc	r21, r15
 1c2:	5f 05       	cpc	r21, r15
 1c4:	41 05       	cpc	r20, r1
 1c6:	5f 05       	cpc	r21, r15
 1c8:	5f 05       	cpc	r21, r15
 1ca:	5f 05       	cpc	r21, r15
 1cc:	61 05       	cpc	r22, r1
 1ce:	5f 05       	cpc	r21, r15
 1d0:	43 05       	cpc	r20, r3
 1d2:	45 05       	cpc	r20, r5

000001d4 <.dinit>:
 1d4:	02 00       	.word	0x0002	; ????
 1d6:	02 0a       	sbc	r0, r18
 1d8:	80 02       	muls	r24, r16
 1da:	0a 02       	muls	r16, r26
 1dc:	28 00       	.word	0x0028	; ????
 1de:	0b f8       	.word	0xf80b	; ????
 1e0:	02 28       	or	r0, r2
 1e2:	02 29       	or	r16, r2
 1e4:	80 00       	.word	0x0080	; ????

000001e6 <__trampolines_start>:
 1e6:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <USART_Receive>
 1ea:	0c 94 59 05 	jmp	0xab2	; 0xab2 <KEYPAD_GetKey+0x5a>
 1ee:	0c 94 55 05 	jmp	0xaaa	; 0xaaa <KEYPAD_GetKey+0x52>
 1f2:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <KEYPAD_GetKey+0x4e>
 1f6:	0c 94 41 05 	jmp	0xa82	; 0xa82 <KEYPAD_GetKey+0x2a>
 1fa:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <KEYPAD_GetKey+0x32>
 1fe:	0c 94 57 05 	jmp	0xaae	; 0xaae <KEYPAD_GetKey+0x56>
 202:	0c 94 4b 05 	jmp	0xa96	; 0xa96 <KEYPAD_GetKey+0x3e>
 206:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <KEYPAD_GetKey+0x4a>
 20a:	0c 94 47 05 	jmp	0xa8e	; 0xa8e <KEYPAD_GetKey+0x36>
 20e:	0c 94 49 05 	jmp	0xa92	; 0xa92 <KEYPAD_GetKey+0x3a>
 212:	0c 94 5b 05 	jmp	0xab6	; 0xab6 <KEYPAD_GetKey+0x5e>
 216:	0c 94 5f 05 	jmp	0xabe	; 0xabe <KEYPAD_GetKey+0x66>
 21a:	0c 94 5d 05 	jmp	0xaba	; 0xaba <KEYPAD_GetKey+0x62>
 21e:	0c 94 61 05 	jmp	0xac2	; 0xac2 <KEYPAD_GetKey+0x6a>
 222:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <USART_Transmit>
 226:	0c 94 43 05 	jmp	0xa86	; 0xa86 <KEYPAD_GetKey+0x2e>
 22a:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <KEYPAD_GetKey+0x42>
 22e:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <KEYPAD_GetKey+0x46>

00000232 <__ctors_end>:
 232:	11 24       	eor	r1, r1
 234:	1f be       	out	0x3f, r1	; 63
 236:	cf ef       	ldi	r28, 0xFF	; 255
 238:	d1 e2       	ldi	r29, 0x21	; 33
 23a:	de bf       	out	0x3e, r29	; 62
 23c:	cd bf       	out	0x3d, r28	; 61
 23e:	00 e0       	ldi	r16, 0x00	; 0
 240:	0c bf       	out	0x3c, r16	; 60

00000242 <__do_copy_data>:
 242:	e4 ed       	ldi	r30, 0xD4	; 212
 244:	f1 e0       	ldi	r31, 0x01	; 1
 246:	41 e0       	ldi	r20, 0x01	; 1
 248:	19 c0       	rjmp	.+50     	; 0x27c <__do_clear_bss+0x8>
 24a:	b7 91       	elpm	r27, Z+
 24c:	a7 91       	elpm	r26, Z+
 24e:	37 91       	elpm	r19, Z+
 250:	27 91       	elpm	r18, Z+
 252:	07 91       	elpm	r16, Z+
 254:	07 fd       	sbrc	r16, 7
 256:	0e c0       	rjmp	.+28     	; 0x274 <__do_clear_bss>
 258:	97 91       	elpm	r25, Z+
 25a:	87 91       	elpm	r24, Z+
 25c:	ef 01       	movw	r28, r30
 25e:	f9 2f       	mov	r31, r25
 260:	e8 2f       	mov	r30, r24
 262:	0b bf       	out	0x3b, r16	; 59
 264:	07 90       	elpm	r0, Z+
 266:	0d 92       	st	X+, r0
 268:	a2 17       	cp	r26, r18
 26a:	b3 07       	cpc	r27, r19
 26c:	d9 f7       	brne	.-10     	; 0x264 <__do_copy_data+0x22>
 26e:	fe 01       	movw	r30, r28
 270:	1b be       	out	0x3b, r1	; 59
 272:	04 c0       	rjmp	.+8      	; 0x27c <__do_clear_bss+0x8>

00000274 <__do_clear_bss>:
 274:	1d 92       	st	X+, r1
 276:	a2 17       	cp	r26, r18
 278:	b3 07       	cpc	r27, r19
 27a:	e1 f7       	brne	.-8      	; 0x274 <__do_clear_bss>
 27c:	e5 3e       	cpi	r30, 0xE5	; 229
 27e:	f4 07       	cpc	r31, r20
 280:	21 f7       	brne	.-56     	; 0x24a <__do_copy_data+0x8>
 282:	0e 94 8b 03 	call	0x716	; 0x716 <main>
 286:	0c 94 45 01 	jmp	0x28a	; 0x28a <_exit>

0000028a <_exit>:
 28a:	f8 94       	cli

0000028c <__stop_program>:
 28c:	ff cf       	rjmp	.-2      	; 0x28c <__stop_program>

Disassembly of section .text:

00000bf4 <__bad_interrupt>:
 bf4:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.keypad_ScanKey:

00000b3a <keypad_ScanKey>:
static uint8_t keypad_ScanKey()
{

	uint8_t var_keyScanCode_u8 = 0xEF,i, var_keyPress_u8;

	for(i=0;i<0x04;i++)                // Scan All the 4-Rows for key press
 b3a:	20 e0       	ldi	r18, 0x00	; 0
        4.Return the ScanCode(Combination of ROW & COL) for decoding the key.
 ***************************************************************************************************/
static uint8_t keypad_ScanKey()
{

	uint8_t var_keyScanCode_u8 = 0xEF,i, var_keyPress_u8;
 b3c:	9f ee       	ldi	r25, 0xEF	; 239

	for(i=0;i<0x04;i++)                // Scan All the 4-Rows for key press
 b3e:	10 c0       	rjmp	.+32     	; 0xb60 <keypad_ScanKey+0x26>
	{
		M_ROW=var_keyScanCode_u8;        // Select 1-Row at a time for Scanning the Key
 b40:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 b44:	e9 ef       	ldi	r30, 0xF9	; 249
 b46:	f0 e0       	ldi	r31, 0x00	; 0
 b48:	31 97       	sbiw	r30, 0x01	; 1
 b4a:	f1 f7       	brne	.-4      	; 0xb48 <keypad_ScanKey+0xe>
 b4c:	00 c0       	rjmp	.+0      	; 0xb4e <keypad_ScanKey+0x14>
 b4e:	00 00       	nop
		DELAY_ms(1);
		var_keyPress_u8=M_COL & 0x0F;    // Read the Column, for key press
 b50:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
 b54:	8f 70       	andi	r24, 0x0F	; 15

		if(var_keyPress_u8!=0x0F)        // If the KEY press is detected for the selected
 b56:	8f 30       	cpi	r24, 0x0F	; 15
 b58:	29 f4       	brne	.+10     	; 0xb64 <keypad_ScanKey+0x2a>
			break;                     // ROW then stop Scanning,

		var_keyScanCode_u8=((var_keyScanCode_u8<<1)+0x01); // Rotate the ScanKey to SCAN the remaining Rows
 b5a:	99 0f       	add	r25, r25
 b5c:	9f 5f       	subi	r25, 0xFF	; 255
static uint8_t keypad_ScanKey()
{

	uint8_t var_keyScanCode_u8 = 0xEF,i, var_keyPress_u8;

	for(i=0;i<0x04;i++)                // Scan All the 4-Rows for key press
 b5e:	2f 5f       	subi	r18, 0xFF	; 255
 b60:	24 30       	cpi	r18, 0x04	; 4
 b62:	70 f3       	brcs	.-36     	; 0xb40 <keypad_ScanKey+0x6>
		if(var_keyPress_u8!=0x0F)        // If the KEY press is detected for the selected
			break;                     // ROW then stop Scanning,

		var_keyScanCode_u8=((var_keyScanCode_u8<<1)+0x01); // Rotate the ScanKey to SCAN the remaining Rows
	}
	var_keyPress_u8 = var_keyPress_u8 + (var_keyScanCode_u8 & 0xf0); // Return the row and COL status to decode the key
 b64:	90 7f       	andi	r25, 0xF0	; 240
	return(var_keyPress_u8);
}
 b66:	89 0f       	add	r24, r25
 b68:	08 95       	ret

Disassembly of section .text.KEYPAD_Init:

00000bec <KEYPAD_Init>:
        1.ROW lines are configured as Output.
        2.Column Lines are configured as Input.
 ***************************************************************************************************/
void KEYPAD_Init()
{
	M_RowColDirection= C_RowOutputColInput_U8; // Configure Row lines as O/P and Column lines as I/P
 bec:	80 ef       	ldi	r24, 0xF0	; 240
 bee:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>
 bf2:	08 95       	ret

Disassembly of section .text.KEYPAD_GetKey:

00000a58 <KEYPAD_GetKey>:
 a58:	89 ef       	ldi	r24, 0xF9	; 249
 a5a:	90 e0       	ldi	r25, 0x00	; 0
 a5c:	01 97       	sbiw	r24, 0x01	; 1
 a5e:	f1 f7       	brne	.-4      	; 0xa5c <KEYPAD_GetKey+0x4>
 a60:	00 c0       	rjmp	.+0      	; 0xa62 <KEYPAD_GetKey+0xa>
 a62:	00 00       	nop

//	KEYPAD_WaitForKeyRelease();    // Wait for the previous key release
	DELAY_ms(1);

//	KEYPAD_WaitForKeyPress();      // Wait for the new key press
	var_keyPress_u8 = keypad_ScanKey();        // Scan for the key pressed.
 a64:	0e 94 9d 05 	call	0xb3a	; 0xb3a <keypad_ScanKey>

	switch(var_keyPress_u8)                       // Decode the key
 a68:	90 e0       	ldi	r25, 0x00	; 0
 a6a:	fc 01       	movw	r30, r24
 a6c:	e7 57       	subi	r30, 0x77	; 119
 a6e:	f1 09       	sbc	r31, r1
 a70:	e8 37       	cpi	r30, 0x78	; 120
 a72:	f1 05       	cpc	r31, r1
 a74:	20 f5       	brcc	.+72     	; 0xabe <KEYPAD_GetKey+0x66>
 a76:	88 27       	eor	r24, r24
 a78:	ee 58       	subi	r30, 0x8E	; 142
 a7a:	ff 4f       	sbci	r31, 0xFF	; 255
 a7c:	8f 4f       	sbci	r24, 0xFF	; 255
 a7e:	0c 94 d9 05 	jmp	0xbb2	; 0xbb2 <__tablejump2__>
	{
	case 0xe7: var_keyPress_u8='*'; break; 
 a82:	8a e2       	ldi	r24, 0x2A	; 42
 a84:	08 95       	ret
	case 0xeb: var_keyPress_u8='7'; break; 
	case 0xed: var_keyPress_u8='4'; break; 
 a86:	84 e3       	ldi	r24, 0x34	; 52
 a88:	08 95       	ret
	case 0xee: var_keyPress_u8='1'; break; 
 a8a:	81 e3       	ldi	r24, 0x31	; 49
 a8c:	08 95       	ret
	case 0xd7: var_keyPress_u8='0'; break; 
 a8e:	80 e3       	ldi	r24, 0x30	; 48
 a90:	08 95       	ret
	case 0xdb: var_keyPress_u8='8'; break; 
 a92:	88 e3       	ldi	r24, 0x38	; 56
 a94:	08 95       	ret
	case 0xdd: var_keyPress_u8='5'; break; 
 a96:	85 e3       	ldi	r24, 0x35	; 53
 a98:	08 95       	ret
	case 0xde: var_keyPress_u8='2'; break; 
 a9a:	82 e3       	ldi	r24, 0x32	; 50
 a9c:	08 95       	ret
	case 0xb7: var_keyPress_u8='#'; break; 
 a9e:	83 e2       	ldi	r24, 0x23	; 35
 aa0:	08 95       	ret
	case 0xbb: var_keyPress_u8='9'; break; 
 aa2:	89 e3       	ldi	r24, 0x39	; 57
 aa4:	08 95       	ret
	case 0xbd: var_keyPress_u8='6'; break; 
 aa6:	86 e3       	ldi	r24, 0x36	; 54
 aa8:	08 95       	ret
	case 0xbe: var_keyPress_u8='3'; break; 
 aaa:	83 e3       	ldi	r24, 0x33	; 51
 aac:	08 95       	ret
	case 0x77: var_keyPress_u8='D'; break;  
 aae:	84 e4       	ldi	r24, 0x44	; 68
 ab0:	08 95       	ret
	case 0x7b: var_keyPress_u8='C'; break;  
 ab2:	83 e4       	ldi	r24, 0x43	; 67
 ab4:	08 95       	ret
	case 0x7d: var_keyPress_u8='B'; break;  
 ab6:	82 e4       	ldi	r24, 0x42	; 66
 ab8:	08 95       	ret
	case 0x7e: var_keyPress_u8='A'; break;  
 aba:	81 e4       	ldi	r24, 0x41	; 65
 abc:	08 95       	ret
	default  : var_keyPress_u8='z'; break;
 abe:	8a e7       	ldi	r24, 0x7A	; 122
 ac0:	08 95       	ret
	var_keyPress_u8 = keypad_ScanKey();        // Scan for the key pressed.

	switch(var_keyPress_u8)                       // Decode the key
	{
	case 0xe7: var_keyPress_u8='*'; break; 
	case 0xeb: var_keyPress_u8='7'; break; 
 ac2:	87 e3       	ldi	r24, 0x37	; 55
	case 0x7d: var_keyPress_u8='B'; break;  
	case 0x7e: var_keyPress_u8='A'; break;  
	default  : var_keyPress_u8='z'; break;
	}
	return(var_keyPress_u8);                      // Return the key
}
 ac4:	08 95       	ret

Disassembly of section .text.USART_init:

00000b94 <USART_init>:

static void
USART_init(uint16_t ubrr)
{
	/* Set baud rate in the USART Baud Rate Registers (UBRR) */
	UBRR0H = (unsigned char) (ubrr >> 8);
 b94:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	UBRR0L = (unsigned char) ubrr;
 b98:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	
	/* Enable receiver and transmitter on RX0 and TX0 */
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0); //NOTE: the ATmega2560 has 4 UARTs: 0,1,2,3
 b9c:	e1 ec       	ldi	r30, 0xC1	; 193
 b9e:	f0 e0       	ldi	r31, 0x00	; 0
 ba0:	80 81       	ld	r24, Z
 ba2:	88 61       	ori	r24, 0x18	; 24
 ba4:	80 83       	st	Z, r24
	// UCSR0B |= (1 << 4) | (1 << 3);
	
	/* Set frame format: 8 bit data, 2 stop bit */
	UCSR0C |= (1 << USBS0) | (3 << UCSZ00);
 ba6:	e2 ec       	ldi	r30, 0xC2	; 194
 ba8:	f0 e0       	ldi	r31, 0x00	; 0
 baa:	80 81       	ld	r24, Z
 bac:	8e 60       	ori	r24, 0x0E	; 14
 bae:	80 83       	st	Z, r24
 bb0:	08 95       	ret

Disassembly of section .text.USART_Transmit:

00000bc2 <USART_Transmit>:

static void
USART_Transmit(unsigned char data, FILE *stream)
{
	/* Wait until the transmit buffer is empty*/
	while(!(UCSR0A & (1 << UDRE0)))
 bc2:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 bc6:	95 ff       	sbrs	r25, 5
 bc8:	fc cf       	rjmp	.-8      	; 0xbc2 <USART_Transmit>
	{
		;
	}
	
	/* Puts the data into a buffer, then sends/transmits the data */
	UDR0 = data;
 bca:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 bce:	08 95       	ret

Disassembly of section .text.USART_Receive:

00000bd0 <USART_Receive>:

static char
USART_Receive(FILE *stream)
{
	/* Wait until the transmit buffer is empty*/
	while(!(UCSR0A & (1 << UDRE0)))
 bd0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 bd4:	85 ff       	sbrs	r24, 5
 bd6:	fc cf       	rjmp	.-8      	; 0xbd0 <USART_Receive>
	{
		;
	}
	
	/* Get the received data from the buffer */
	return UDR0;
 bd8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
}
 bdc:	08 95       	ret

Disassembly of section .text.input_password:

0000084e <input_password>:
FILE uart_input = FDEV_SETUP_STREAM(NULL, USART_Receive, _FDEV_SETUP_READ);



void
input_password(int password_length){
 84e:	cf 93       	push	r28
 850:	df 93       	push	r29
	/* This function is responsible for the keypad password input */
	
	int index = 0;
	int8_t temp_read = 122;
	
	KEYPAD_Init();
 852:	0e 94 f6 05 	call	0xbec	; 0xbec <KEYPAD_Init>
	USART_init(MYUBRR);
 856:	87 e6       	ldi	r24, 0x67	; 103
 858:	90 e0       	ldi	r25, 0x00	; 0
 85a:	0e 94 ca 05 	call	0xb94	; 0xb94 <USART_init>
	stdout = &uart_output;
 85e:	e4 e0       	ldi	r30, 0x04	; 4
 860:	f2 e0       	ldi	r31, 0x02	; 2
 862:	89 e1       	ldi	r24, 0x19	; 25
 864:	92 e0       	ldi	r25, 0x02	; 2
 866:	93 83       	std	Z+3, r25	; 0x03
 868:	82 83       	std	Z+2, r24	; 0x02
	stdin = &uart_input;
 86a:	8a e0       	ldi	r24, 0x0A	; 10
 86c:	92 e0       	ldi	r25, 0x02	; 2
 86e:	91 83       	std	Z+1, r25	; 0x01
 870:	80 83       	st	Z, r24
	
	// Key press indicator led
	DDRB |= (1 << PB5);
 872:	84 b1       	in	r24, 0x04	; 4
 874:	80 62       	ori	r24, 0x20	; 32
 876:	84 b9       	out	0x04, r24	; 4
void
input_password(int password_length){
	
	/* This function is responsible for the keypad password input */
	
	int index = 0;
 878:	c0 e0       	ldi	r28, 0x00	; 0
 87a:	d0 e0       	ldi	r29, 0x00	; 0
	
	
	while (1)
	{
		// Get key press using the provided keypad function
		temp_read = KEYPAD_GetKey();
 87c:	0e 94 2c 05 	call	0xa58	; 0xa58 <KEYPAD_GetKey>
		
		// If the press is "#", exits the input loop
		if (temp_read == 35)
 880:	83 32       	cpi	r24, 0x23	; 35
 882:	09 f4       	brne	.+2      	; 0x886 <input_password+0x38>
 884:	4c c0       	rjmp	.+152    	; 0x91e <input_password+0xd0>
		{
			break;
		}
		
		// If the press is 0-9 & the index is not above 3
		else if (temp_read >= 48 && temp_read <= 57 && index <= 3)
 886:	20 ed       	ldi	r18, 0xD0	; 208
 888:	28 0f       	add	r18, r24
 88a:	2a 30       	cpi	r18, 0x0A	; 10
 88c:	00 f5       	brcc	.+64     	; 0x8ce <input_password+0x80>
 88e:	c4 30       	cpi	r28, 0x04	; 4
 890:	d1 05       	cpc	r29, r1
 892:	ec f4       	brge	.+58     	; 0x8ce <input_password+0x80>
		{
			PORTB &= ~(1 << PB7);
 894:	25 b1       	in	r18, 0x05	; 5
 896:	2f 77       	andi	r18, 0x7F	; 127
 898:	25 b9       	out	0x05, r18	; 5
			PORTB |=  (1 << PB5);
 89a:	25 b1       	in	r18, 0x05	; 5
 89c:	20 62       	ori	r18, 0x20	; 32
 89e:	25 b9       	out	0x05, r18	; 5
			
			// Store the number to the current index position
			g_user_given_password[index] = temp_read;
 8a0:	fe 01       	movw	r30, r28
 8a2:	e0 50       	subi	r30, 0x00	; 0
 8a4:	fe 4f       	sbci	r31, 0xFE	; 254
 8a6:	80 83       	st	Z, r24
			index++;
 8a8:	21 96       	adiw	r28, 0x01	; 1
			
			// Wait until the key is depressed 
			while(temp_read != 122)
 8aa:	0b c0       	rjmp	.+22     	; 0x8c2 <input_password+0x74>
			{
				temp_read = KEYPAD_GetKey();
 8ac:	0e 94 2c 05 	call	0xa58	; 0xa58 <KEYPAD_GetKey>
 8b0:	2f ef       	ldi	r18, 0xFF	; 255
 8b2:	31 ee       	ldi	r19, 0xE1	; 225
 8b4:	94 e0       	ldi	r25, 0x04	; 4
 8b6:	21 50       	subi	r18, 0x01	; 1
 8b8:	30 40       	sbci	r19, 0x00	; 0
 8ba:	90 40       	sbci	r25, 0x00	; 0
 8bc:	e1 f7       	brne	.-8      	; 0x8b6 <input_password+0x68>
 8be:	00 c0       	rjmp	.+0      	; 0x8c0 <input_password+0x72>
 8c0:	00 00       	nop
			// Store the number to the current index position
			g_user_given_password[index] = temp_read;
			index++;
			
			// Wait until the key is depressed 
			while(temp_read != 122)
 8c2:	8a 37       	cpi	r24, 0x7A	; 122
 8c4:	99 f7       	brne	.-26     	; 0x8ac <input_password+0x5e>
			{
				temp_read = KEYPAD_GetKey();
				_delay_ms(100);
			}
			
			PORTB &=  ~(1 << PB5);
 8c6:	85 b1       	in	r24, 0x05	; 5
 8c8:	8f 7d       	andi	r24, 0xDF	; 223
 8ca:	85 b9       	out	0x05, r24	; 5
 8cc:	1e c0       	rjmp	.+60     	; 0x90a <input_password+0xbc>
		}
		
		// Backspace, if "*" is received, removes the last number inputted
		else if (temp_read == 42 && index >= 1)
 8ce:	8a 32       	cpi	r24, 0x2A	; 42
 8d0:	e1 f4       	brne	.+56     	; 0x90a <input_password+0xbc>
 8d2:	1c 16       	cp	r1, r28
 8d4:	1d 06       	cpc	r1, r29
 8d6:	cc f4       	brge	.+50     	; 0x90a <input_password+0xbc>
		{
			PORTB |=  (1 << PB7);
 8d8:	95 b1       	in	r25, 0x05	; 5
 8da:	90 68       	ori	r25, 0x80	; 128
 8dc:	95 b9       	out	0x05, r25	; 5
			g_user_given_password[index-1] = 0;
 8de:	21 97       	sbiw	r28, 0x01	; 1
 8e0:	fe 01       	movw	r30, r28
 8e2:	e0 50       	subi	r30, 0x00	; 0
 8e4:	fe 4f       	sbci	r31, 0xFE	; 254
 8e6:	10 82       	st	Z, r1
			index--;
			
			// Wait until the key is depressed
			while(temp_read != 122)
 8e8:	0b c0       	rjmp	.+22     	; 0x900 <input_password+0xb2>
			{
				temp_read = KEYPAD_GetKey();
 8ea:	0e 94 2c 05 	call	0xa58	; 0xa58 <KEYPAD_GetKey>
 8ee:	2f ef       	ldi	r18, 0xFF	; 255
 8f0:	31 ee       	ldi	r19, 0xE1	; 225
 8f2:	94 e0       	ldi	r25, 0x04	; 4
 8f4:	21 50       	subi	r18, 0x01	; 1
 8f6:	30 40       	sbci	r19, 0x00	; 0
 8f8:	90 40       	sbci	r25, 0x00	; 0
 8fa:	e1 f7       	brne	.-8      	; 0x8f4 <input_password+0xa6>
 8fc:	00 c0       	rjmp	.+0      	; 0x8fe <input_password+0xb0>
 8fe:	00 00       	nop
			PORTB |=  (1 << PB7);
			g_user_given_password[index-1] = 0;
			index--;
			
			// Wait until the key is depressed
			while(temp_read != 122)
 900:	8a 37       	cpi	r24, 0x7A	; 122
 902:	99 f7       	brne	.-26     	; 0x8ea <input_password+0x9c>
			{
				temp_read = KEYPAD_GetKey();
				_delay_ms(100);
			}
			
			PORTB &=  ~(1 << PB7);
 904:	85 b1       	in	r24, 0x05	; 5
 906:	8f 77       	andi	r24, 0x7F	; 127
 908:	85 b9       	out	0x05, r24	; 5
 90a:	2f ef       	ldi	r18, 0xFF	; 255
 90c:	31 ee       	ldi	r19, 0xE1	; 225
 90e:	84 e0       	ldi	r24, 0x04	; 4
 910:	21 50       	subi	r18, 0x01	; 1
 912:	30 40       	sbci	r19, 0x00	; 0
 914:	80 40       	sbci	r24, 0x00	; 0
 916:	e1 f7       	brne	.-8      	; 0x910 <input_password+0xc2>
 918:	00 c0       	rjmp	.+0      	; 0x91a <input_password+0xcc>
 91a:	00 00       	nop
 91c:	af cf       	rjmp	.-162    	; 0x87c <input_password+0x2e>
		}
		
		_delay_ms(100);
	}
}
 91e:	df 91       	pop	r29
 920:	cf 91       	pop	r28
 922:	08 95       	ret

Disassembly of section .text.compare_passwords:

00000ac6 <compare_passwords>:

bool
compare_passwords(int8_t stored_password[], int8_t given_password[], int password_length)
{
 ac6:	cf 93       	push	r28
 ac8:	df 93       	push	r29
 aca:	ec 01       	movw	r28, r24
 acc:	da 01       	movw	r26, r20
	/* This function compares the "stored" password and the user inputted password */
	
	int index;
	
	// Goes through the array and compares each item, when it finds the first that does not match, returns 0
	for (index = 0; index <= password_length-1; index++ )
 ace:	20 e0       	ldi	r18, 0x00	; 0
 ad0:	30 e0       	ldi	r19, 0x00	; 0
 ad2:	0c c0       	rjmp	.+24     	; 0xaec <compare_passwords+0x26>
	{
		if (stored_password[index] != given_password[index])
 ad4:	fe 01       	movw	r30, r28
 ad6:	e2 0f       	add	r30, r18
 ad8:	f3 1f       	adc	r31, r19
 ada:	50 81       	ld	r21, Z
 adc:	fb 01       	movw	r30, r22
 ade:	e2 0f       	add	r30, r18
 ae0:	f3 1f       	adc	r31, r19
 ae2:	90 81       	ld	r25, Z
 ae4:	59 13       	cpse	r21, r25
 ae6:	09 c0       	rjmp	.+18     	; 0xafa <compare_passwords+0x34>
	/* This function compares the "stored" password and the user inputted password */
	
	int index;
	
	// Goes through the array and compares each item, when it finds the first that does not match, returns 0
	for (index = 0; index <= password_length-1; index++ )
 ae8:	2f 5f       	subi	r18, 0xFF	; 255
 aea:	3f 4f       	sbci	r19, 0xFF	; 255
 aec:	fd 01       	movw	r30, r26
 aee:	31 97       	sbiw	r30, 0x01	; 1
 af0:	e2 17       	cp	r30, r18
 af2:	f3 07       	cpc	r31, r19
 af4:	7c f7       	brge	.-34     	; 0xad4 <compare_passwords+0xe>
		{
			return 0;
		}
	}
	// If no different elements are found, returns 1
	return 1;
 af6:	81 e0       	ldi	r24, 0x01	; 1
 af8:	01 c0       	rjmp	.+2      	; 0xafc <compare_passwords+0x36>
	// Goes through the array and compares each item, when it finds the first that does not match, returns 0
	for (index = 0; index <= password_length-1; index++ )
	{
		if (stored_password[index] != given_password[index])
		{
			return 0;
 afa:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	// If no different elements are found, returns 1
	return 1;
}
 afc:	df 91       	pop	r29
 afe:	cf 91       	pop	r28
 b00:	08 95       	ret

Disassembly of section .text.main:

00000716 <main>:

int
main(void)
{
 716:	cf 93       	push	r28
 718:	df 93       	push	r29
 71a:	00 d0       	rcall	.+0      	; 0x71c <main+0x6>
 71c:	1f 92       	push	r1
 71e:	cd b7       	in	r28, 0x3d	; 61
 720:	de b7       	in	r29, 0x3e	; 62

	USART_init(MYUBRR);
 722:	87 e6       	ldi	r24, 0x67	; 103
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	0e 94 ca 05 	call	0xb94	; 0xb94 <USART_init>
	stdout = &uart_output;
 72a:	e4 e0       	ldi	r30, 0x04	; 4
 72c:	f2 e0       	ldi	r31, 0x02	; 2
 72e:	89 e1       	ldi	r24, 0x19	; 25
 730:	92 e0       	ldi	r25, 0x02	; 2
 732:	93 83       	std	Z+3, r25	; 0x03
 734:	82 83       	std	Z+2, r24	; 0x02
	stdin = &uart_input;
 736:	8a e0       	ldi	r24, 0x0A	; 10
 738:	92 e0       	ldi	r25, 0x02	; 2
 73a:	91 83       	std	Z+1, r25	; 0x01
 73c:	80 83       	st	Z, r24
	// SPI COMMUNICATION //
	/* set SS, MOSI and SCK as output, pins 53 (PB0), 51 (PB2) and 52 (PB1) */
	DDRB |= (1 << PB0) | (1 << PB1) | (1 << PB2); // SS as output
 73e:	84 b1       	in	r24, 0x04	; 4
 740:	87 60       	ori	r24, 0x07	; 7
 742:	84 b9       	out	0x04, r24	; 4
	/* set SPI enable and master/slave select, making MEGA the master */
	SPCR |= (1 << 6) | (1 << 4);
 744:	8c b5       	in	r24, 0x2c	; 44
 746:	80 65       	ori	r24, 0x50	; 80
 748:	8c bd       	out	0x2c, r24	; 44
	/* set SPI clock rate to 1 MHz */
	SPCR |= (1 << 0);
 74a:	8c b5       	in	r24, 0x2c	; 44
 74c:	81 60       	ori	r24, 0x01	; 1
 74e:	8c bd       	out	0x2c, r24	; 44
	
	// Defining the keypad pins as input
	DDRK = 0b00000000;
 750:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>
  
	// Motion sensor input pin, MEGA pin 2
	DDRE &= ~(1 << PE4);
 754:	8d b1       	in	r24, 0x0d	; 13
 756:	8f 7e       	andi	r24, 0xEF	; 239
 758:	8d b9       	out	0x0d, r24	; 13
  
	// Alarm output, MEGA pin 13
	DDRB |= (1 << PB7);
 75a:	84 b1       	in	r24, 0x04	; 4
 75c:	80 68       	ori	r24, 0x80	; 128
 75e:	84 b9       	out	0x04, r24	; 4
	
	// Disarmed led, MEGA pin 12
	DDRB |= (1 << PB6);
 760:	84 b1       	in	r24, 0x04	; 4
 762:	80 64       	ori	r24, 0x40	; 64
 764:	84 b9       	out	0x04, r24	; 4
	
	int8_t status;
	
	// Defining the password for the alarm system
	int8_t stored_password[4];
	stored_password[0] = 49;
 766:	81 e3       	ldi	r24, 0x31	; 49
 768:	89 83       	std	Y+1, r24	; 0x01
	stored_password[1] = 50;
 76a:	82 e3       	ldi	r24, 0x32	; 50
 76c:	8a 83       	std	Y+2, r24	; 0x02
	stored_password[2] = 51;
 76e:	83 e3       	ldi	r24, 0x33	; 51
 770:	8b 83       	std	Y+3, r24	; 0x03
	stored_password[3] = 52;
 772:	84 e3       	ldi	r24, 0x34	; 52
 774:	8c 83       	std	Y+4, r24	; 0x04
			State machine - switch case 
			Three different states: ARMED, MOTIONDETECTED and DISARMED
		*/
		
		/* send byte to slave and receive a byte from slave */
		PORTB &= ~(1 << PB0); // SS LOW
 776:	85 b1       	in	r24, 0x05	; 5
 778:	8e 7f       	andi	r24, 0xFE	; 254
 77a:	85 b9       	out	0x05, r24	; 5
		for(int8_t spi_data_index = 0; spi_data_index < sizeof(spi_send_data); spi_data_index++)
 77c:	80 e0       	ldi	r24, 0x00	; 0
 77e:	06 c0       	rjmp	.+12     	; 0x78c <main+0x76>
		{
			
			SPDR = spi_send_data; // send byte using SPI data register
 780:	91 e0       	ldi	r25, 0x01	; 1
 782:	9e bd       	out	0x2e, r25	; 46
			
			while(!(SPSR & (1 << SPIF)))
 784:	0d b4       	in	r0, 0x2d	; 45
 786:	07 fe       	sbrs	r0, 7
 788:	fd cf       	rjmp	.-6      	; 0x784 <main+0x6e>
			Three different states: ARMED, MOTIONDETECTED and DISARMED
		*/
		
		/* send byte to slave and receive a byte from slave */
		PORTB &= ~(1 << PB0); // SS LOW
		for(int8_t spi_data_index = 0; spi_data_index < sizeof(spi_send_data); spi_data_index++)
 78a:	8f 5f       	subi	r24, 0xFF	; 255
 78c:	82 30       	cpi	r24, 0x02	; 2
 78e:	c0 f3       	brcs	.-16     	; 0x780 <main+0x6a>
				/* wait until the transmission is complete */
				;
			}
		}
		
		switch(g_STATE) 
 790:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <g_STATE>
 794:	81 30       	cpi	r24, 0x01	; 1
 796:	11 f1       	breq	.+68     	; 0x7dc <main+0xc6>
 798:	82 30       	cpi	r24, 0x02	; 2
 79a:	09 f4       	brne	.+2      	; 0x79e <main+0x88>
 79c:	43 c0       	rjmp	.+134    	; 0x824 <main+0x10e>
 79e:	81 11       	cpse	r24, r1
 7a0:	ea cf       	rjmp	.-44     	; 0x776 <main+0x60>
		{
			case ARMED:
				printf("State: ARMED\n\r");
 7a2:	8e e8       	ldi	r24, 0x8E	; 142
 7a4:	92 e0       	ldi	r25, 0x02	; 2
 7a6:	a0 e0       	ldi	r26, 0x00	; 0
 7a8:	af 93       	push	r26
 7aa:	9f 93       	push	r25
 7ac:	8f 93       	push	r24
 7ae:	0e 94 b5 05 	call	0xb6a	; 0xb6a <printf>
				PORTB &= ~(1 << PB7);
 7b2:	85 b1       	in	r24, 0x05	; 5
 7b4:	8f 77       	andi	r24, 0x7F	; 127
 7b6:	85 b9       	out	0x05, r24	; 5
				s_sensor_state = (PINE & (1 << PE4));
				if (0 != s_sensor_state)
 7b8:	0f 90       	pop	r0
 7ba:	0f 90       	pop	r0
 7bc:	0f 90       	pop	r0
 7be:	64 9b       	sbis	0x0c, 4	; 12
 7c0:	03 c0       	rjmp	.+6      	; 0x7c8 <main+0xb2>
				{
					g_STATE = 1;
 7c2:	81 e0       	ldi	r24, 0x01	; 1
 7c4:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <g_STATE>
 7c8:	2f ef       	ldi	r18, 0xFF	; 255
 7ca:	83 ed       	ldi	r24, 0xD3	; 211
 7cc:	90 e3       	ldi	r25, 0x30	; 48
 7ce:	21 50       	subi	r18, 0x01	; 1
 7d0:	80 40       	sbci	r24, 0x00	; 0
 7d2:	90 40       	sbci	r25, 0x00	; 0
 7d4:	e1 f7       	brne	.-8      	; 0x7ce <main+0xb8>
 7d6:	00 c0       	rjmp	.+0      	; 0x7d8 <main+0xc2>
 7d8:	00 00       	nop
 7da:	cd cf       	rjmp	.-102    	; 0x776 <main+0x60>
				}
				_delay_ms(1000);
			break;
		  
			case MOTIONDETECTED:
				printf("State: MOTIONDETECTED\n\r");
 7dc:	8d e9       	ldi	r24, 0x9D	; 157
 7de:	92 e0       	ldi	r25, 0x02	; 2
 7e0:	a0 e0       	ldi	r26, 0x00	; 0
 7e2:	af 93       	push	r26
 7e4:	9f 93       	push	r25
 7e6:	8f 93       	push	r24
 7e8:	0e 94 b5 05 	call	0xb6a	; 0xb6a <printf>
				PORTB |=  (1 << PB7);
 7ec:	85 b1       	in	r24, 0x05	; 5
 7ee:	80 68       	ori	r24, 0x80	; 128
 7f0:	85 b9       	out	0x05, r24	; 5
				input_password(password_length);
 7f2:	84 e0       	ldi	r24, 0x04	; 4
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	0e 94 27 04 	call	0x84e	; 0x84e <input_password>
				password_state = compare_passwords(stored_password, g_user_given_password, 4);
 7fa:	44 e0       	ldi	r20, 0x04	; 4
 7fc:	50 e0       	ldi	r21, 0x00	; 0
 7fe:	60 e0       	ldi	r22, 0x00	; 0
 800:	72 e0       	ldi	r23, 0x02	; 2
 802:	ce 01       	movw	r24, r28
 804:	01 96       	adiw	r24, 0x01	; 1
 806:	0e 94 63 05 	call	0xac6	; 0xac6 <compare_passwords>
				if (password_state != 0)
 80a:	0f 90       	pop	r0
 80c:	0f 90       	pop	r0
 80e:	0f 90       	pop	r0
 810:	88 23       	and	r24, r24
 812:	09 f4       	brne	.+2      	; 0x816 <main+0x100>
 814:	b0 cf       	rjmp	.-160    	; 0x776 <main+0x60>
				{
					PORTB |=   (1 << PB6);
 816:	85 b1       	in	r24, 0x05	; 5
 818:	80 64       	ori	r24, 0x40	; 64
 81a:	85 b9       	out	0x05, r24	; 5
					g_STATE = 2;
 81c:	82 e0       	ldi	r24, 0x02	; 2
 81e:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <g_STATE>
 822:	a9 cf       	rjmp	.-174    	; 0x776 <main+0x60>
				}
				
			break;
		  
			case DISARMED:
				printf("State: UNARMED\n\r");
 824:	85 eb       	ldi	r24, 0xB5	; 181
 826:	92 e0       	ldi	r25, 0x02	; 2
 828:	a0 e0       	ldi	r26, 0x00	; 0
 82a:	af 93       	push	r26
 82c:	9f 93       	push	r25
 82e:	8f 93       	push	r24
 830:	0e 94 b5 05 	call	0xb6a	; 0xb6a <printf>
 834:	2f ef       	ldi	r18, 0xFF	; 255
 836:	83 ed       	ldi	r24, 0xD3	; 211
 838:	90 e3       	ldi	r25, 0x30	; 48
 83a:	21 50       	subi	r18, 0x01	; 1
 83c:	80 40       	sbci	r24, 0x00	; 0
 83e:	90 40       	sbci	r25, 0x00	; 0
 840:	e1 f7       	brne	.-8      	; 0x83a <main+0x124>
 842:	00 c0       	rjmp	.+0      	; 0x844 <main+0x12e>
 844:	00 00       	nop
 846:	0f 90       	pop	r0
 848:	0f 90       	pop	r0
 84a:	0f 90       	pop	r0
 84c:	94 cf       	rjmp	.-216    	; 0x776 <main+0x60>

Disassembly of section .text.libgcc:

00000bb2 <__tablejump2__>:
 bb2:	ee 0f       	add	r30, r30
 bb4:	ff 1f       	adc	r31, r31
 bb6:	88 1f       	adc	r24, r24
 bb8:	8b bf       	out	0x3b, r24	; 59
 bba:	07 90       	elpm	r0, Z+
 bbc:	f6 91       	elpm	r31, Z
 bbe:	e0 2d       	mov	r30, r0
 bc0:	19 94       	eijmp

Disassembly of section .text.avrlibc:

00000b6a <printf>:
 b6a:	cf 93       	push	r28
 b6c:	df 93       	push	r29
 b6e:	cd b7       	in	r28, 0x3d	; 61
 b70:	de b7       	in	r29, 0x3e	; 62
 b72:	9e 01       	movw	r18, r28
 b74:	2a 5f       	subi	r18, 0xFA	; 250
 b76:	3f 4f       	sbci	r19, 0xFF	; 255
 b78:	f9 01       	movw	r30, r18
 b7a:	41 91       	ld	r20, Z+
 b7c:	51 91       	ld	r21, Z+
 b7e:	61 91       	ld	r22, Z+
 b80:	9f 01       	movw	r18, r30
 b82:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__iob+0x2>
 b86:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <__iob+0x3>
 b8a:	0e 94 63 01 	call	0x2c6	; 0x2c6 <vfprintf>
 b8e:	df 91       	pop	r29
 b90:	cf 91       	pop	r28
 b92:	08 95       	ret

Disassembly of section .text.avrlibc:

000002c6 <vfprintf>:
 2c6:	2f 92       	push	r2
 2c8:	3f 92       	push	r3
 2ca:	4f 92       	push	r4
 2cc:	6f 92       	push	r6
 2ce:	7f 92       	push	r7
 2d0:	8f 92       	push	r8
 2d2:	9f 92       	push	r9
 2d4:	af 92       	push	r10
 2d6:	bf 92       	push	r11
 2d8:	cf 92       	push	r12
 2da:	df 92       	push	r13
 2dc:	ef 92       	push	r14
 2de:	ff 92       	push	r15
 2e0:	0f 93       	push	r16
 2e2:	1f 93       	push	r17
 2e4:	cf 93       	push	r28
 2e6:	df 93       	push	r29
 2e8:	cd b7       	in	r28, 0x3d	; 61
 2ea:	de b7       	in	r29, 0x3e	; 62
 2ec:	62 97       	sbiw	r28, 0x12	; 18
 2ee:	0f b6       	in	r0, 0x3f	; 63
 2f0:	f8 94       	cli
 2f2:	de bf       	out	0x3e, r29	; 62
 2f4:	0f be       	out	0x3f, r0	; 63
 2f6:	cd bf       	out	0x3d, r28	; 61
 2f8:	6c 01       	movw	r12, r24
 2fa:	3a 01       	movw	r6, r20
 2fc:	86 2e       	mov	r8, r22
 2fe:	79 01       	movw	r14, r18
 300:	fc 01       	movw	r30, r24
 302:	10 86       	std	Z+8, r1	; 0x08
 304:	17 82       	std	Z+7, r1	; 0x07
 306:	84 81       	ldd	r24, Z+4	; 0x04
 308:	81 ff       	sbrs	r24, 1
 30a:	eb c1       	rjmp	.+982    	; 0x6e2 <__LOCK_REGION_LENGTH__+0x2e2>
 30c:	9e 01       	movw	r18, r28
 30e:	2f 5f       	subi	r18, 0xFF	; 255
 310:	3f 4f       	sbci	r19, 0xFF	; 255
 312:	3d 87       	std	Y+13, r19	; 0x0d
 314:	2c 87       	std	Y+12, r18	; 0x0c
 316:	c9 01       	movw	r24, r18
 318:	a0 e8       	ldi	r26, 0x80	; 128
 31a:	88 8b       	std	Y+16, r24	; 0x10
 31c:	99 8b       	std	Y+17, r25	; 0x11
 31e:	aa 8b       	std	Y+18, r26	; 0x12
 320:	9f e3       	ldi	r25, 0x3F	; 63
 322:	99 2e       	mov	r9, r25
 324:	f3 01       	movw	r30, r6
 326:	58 2d       	mov	r21, r8
 328:	0e 94 ef 05 	call	0xbde	; 0xbde <__xload_1>
 32c:	86 2f       	mov	r24, r22
 32e:	66 23       	and	r22, r22
 330:	09 f4       	brne	.+2      	; 0x334 <vfprintf+0x6e>
 332:	d3 c1       	rjmp	.+934    	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
 334:	48 2d       	mov	r20, r8
 336:	93 01       	movw	r18, r6
 338:	2f 5f       	subi	r18, 0xFF	; 255
 33a:	3f 4f       	sbci	r19, 0xFF	; 255
 33c:	4f 4f       	sbci	r20, 0xFF	; 255
 33e:	65 32       	cpi	r22, 0x25	; 37
 340:	19 f0       	breq	.+6      	; 0x348 <vfprintf+0x82>
 342:	39 01       	movw	r6, r18
 344:	84 2e       	mov	r8, r20
 346:	0b c0       	rjmp	.+22     	; 0x35e <vfprintf+0x98>
 348:	f9 01       	movw	r30, r18
 34a:	54 2f       	mov	r21, r20
 34c:	0e 94 ef 05 	call	0xbde	; 0xbde <__xload_1>
 350:	86 2f       	mov	r24, r22
 352:	92 e0       	ldi	r25, 0x02	; 2
 354:	69 0e       	add	r6, r25
 356:	71 1c       	adc	r7, r1
 358:	81 1c       	adc	r8, r1
 35a:	65 32       	cpi	r22, 0x25	; 37
 35c:	29 f4       	brne	.+10     	; 0x368 <vfprintf+0xa2>
 35e:	b6 01       	movw	r22, r12
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <fputc>
 366:	de cf       	rjmp	.-68     	; 0x324 <vfprintf+0x5e>
 368:	b1 2c       	mov	r11, r1
 36a:	00 e0       	ldi	r16, 0x00	; 0
 36c:	10 e0       	ldi	r17, 0x00	; 0
 36e:	10 32       	cpi	r17, 0x20	; 32
 370:	a0 f4       	brcc	.+40     	; 0x39a <vfprintf+0xd4>
 372:	8b 32       	cpi	r24, 0x2B	; 43
 374:	69 f0       	breq	.+26     	; 0x390 <vfprintf+0xca>
 376:	30 f4       	brcc	.+12     	; 0x384 <vfprintf+0xbe>
 378:	80 32       	cpi	r24, 0x20	; 32
 37a:	59 f0       	breq	.+22     	; 0x392 <vfprintf+0xcc>
 37c:	83 32       	cpi	r24, 0x23	; 35
 37e:	69 f4       	brne	.+26     	; 0x39a <vfprintf+0xd4>
 380:	10 61       	ori	r17, 0x10	; 16
 382:	2c c0       	rjmp	.+88     	; 0x3dc <vfprintf+0x116>
 384:	8d 32       	cpi	r24, 0x2D	; 45
 386:	39 f0       	breq	.+14     	; 0x396 <vfprintf+0xd0>
 388:	80 33       	cpi	r24, 0x30	; 48
 38a:	39 f4       	brne	.+14     	; 0x39a <vfprintf+0xd4>
 38c:	11 60       	ori	r17, 0x01	; 1
 38e:	26 c0       	rjmp	.+76     	; 0x3dc <vfprintf+0x116>
 390:	12 60       	ori	r17, 0x02	; 2
 392:	14 60       	ori	r17, 0x04	; 4
 394:	23 c0       	rjmp	.+70     	; 0x3dc <vfprintf+0x116>
 396:	18 60       	ori	r17, 0x08	; 8
 398:	21 c0       	rjmp	.+66     	; 0x3dc <vfprintf+0x116>
 39a:	17 fd       	sbrc	r17, 7
 39c:	2a c0       	rjmp	.+84     	; 0x3f2 <vfprintf+0x12c>
 39e:	90 ed       	ldi	r25, 0xD0	; 208
 3a0:	98 0f       	add	r25, r24
 3a2:	9a 30       	cpi	r25, 0x0A	; 10
 3a4:	78 f4       	brcc	.+30     	; 0x3c4 <vfprintf+0xfe>
 3a6:	16 ff       	sbrs	r17, 6
 3a8:	06 c0       	rjmp	.+12     	; 0x3b6 <vfprintf+0xf0>
 3aa:	aa e0       	ldi	r26, 0x0A	; 10
 3ac:	ba 9e       	mul	r11, r26
 3ae:	90 0d       	add	r25, r0
 3b0:	11 24       	eor	r1, r1
 3b2:	b9 2e       	mov	r11, r25
 3b4:	13 c0       	rjmp	.+38     	; 0x3dc <vfprintf+0x116>
 3b6:	ea e0       	ldi	r30, 0x0A	; 10
 3b8:	0e 9f       	mul	r16, r30
 3ba:	90 0d       	add	r25, r0
 3bc:	11 24       	eor	r1, r1
 3be:	09 2f       	mov	r16, r25
 3c0:	10 62       	ori	r17, 0x20	; 32
 3c2:	0c c0       	rjmp	.+24     	; 0x3dc <vfprintf+0x116>
 3c4:	8e 32       	cpi	r24, 0x2E	; 46
 3c6:	21 f4       	brne	.+8      	; 0x3d0 <vfprintf+0x10a>
 3c8:	16 fd       	sbrc	r17, 6
 3ca:	87 c1       	rjmp	.+782    	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
 3cc:	10 64       	ori	r17, 0x40	; 64
 3ce:	06 c0       	rjmp	.+12     	; 0x3dc <vfprintf+0x116>
 3d0:	8c 36       	cpi	r24, 0x6C	; 108
 3d2:	11 f4       	brne	.+4      	; 0x3d8 <vfprintf+0x112>
 3d4:	10 68       	ori	r17, 0x80	; 128
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <vfprintf+0x116>
 3d8:	88 36       	cpi	r24, 0x68	; 104
 3da:	59 f4       	brne	.+22     	; 0x3f2 <vfprintf+0x12c>
 3dc:	f3 01       	movw	r30, r6
 3de:	58 2d       	mov	r21, r8
 3e0:	0e 94 ef 05 	call	0xbde	; 0xbde <__xload_1>
 3e4:	86 2f       	mov	r24, r22
 3e6:	ff ef       	ldi	r31, 0xFF	; 255
 3e8:	6f 1a       	sub	r6, r31
 3ea:	7f 0a       	sbc	r7, r31
 3ec:	8f 0a       	sbc	r8, r31
 3ee:	61 11       	cpse	r22, r1
 3f0:	be cf       	rjmp	.-132    	; 0x36e <vfprintf+0xa8>
 3f2:	98 2f       	mov	r25, r24
 3f4:	9f 7d       	andi	r25, 0xDF	; 223
 3f6:	95 54       	subi	r25, 0x45	; 69
 3f8:	93 30       	cpi	r25, 0x03	; 3
 3fa:	28 f4       	brcc	.+10     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3fc:	24 e0       	ldi	r18, 0x04	; 4
 3fe:	e2 0e       	add	r14, r18
 400:	f1 1c       	adc	r15, r1
 402:	99 82       	std	Y+1, r9	; 0x01
 404:	0f c0       	rjmp	.+30     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 406:	83 36       	cpi	r24, 0x63	; 99
 408:	31 f0       	breq	.+12     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 40a:	83 37       	cpi	r24, 0x73	; 115
 40c:	91 f0       	breq	.+36     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 40e:	83 35       	cpi	r24, 0x53	; 83
 410:	09 f0       	breq	.+2      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 412:	64 c0       	rjmp	.+200    	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
 414:	27 c0       	rjmp	.+78     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 416:	f7 01       	movw	r30, r14
 418:	80 81       	ld	r24, Z
 41a:	89 83       	std	Y+1, r24	; 0x01
 41c:	97 01       	movw	r18, r14
 41e:	2e 5f       	subi	r18, 0xFE	; 254
 420:	3f 4f       	sbci	r19, 0xFF	; 255
 422:	79 01       	movw	r14, r18
 424:	28 88       	ldd	r2, Y+16	; 0x10
 426:	39 88       	ldd	r3, Y+17	; 0x11
 428:	4a 88       	ldd	r4, Y+18	; 0x12
 42a:	aa 24       	eor	r10, r10
 42c:	a3 94       	inc	r10
 42e:	b1 2c       	mov	r11, r1
 430:	17 c0       	rjmp	.+46     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 432:	a7 01       	movw	r20, r14
 434:	4d 5f       	subi	r20, 0xFD	; 253
 436:	5f 4f       	sbci	r21, 0xFF	; 255
 438:	5f 87       	std	Y+15, r21	; 0x0f
 43a:	4e 87       	std	Y+14, r20	; 0x0e
 43c:	f7 01       	movw	r30, r14
 43e:	20 80       	ld	r2, Z
 440:	31 80       	ldd	r3, Z+1	; 0x01
 442:	42 80       	ldd	r4, Z+2	; 0x02
 444:	16 ff       	sbrs	r17, 6
 446:	03 c0       	rjmp	.+6      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 448:	4b 2d       	mov	r20, r11
 44a:	50 e0       	ldi	r21, 0x00	; 0
 44c:	02 c0       	rjmp	.+4      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 44e:	4f ef       	ldi	r20, 0xFF	; 255
 450:	5f ef       	ldi	r21, 0xFF	; 255
 452:	84 2d       	mov	r24, r4
 454:	b1 01       	movw	r22, r2
 456:	0e 94 81 05 	call	0xb02	; 0xb02 <strnlen>
 45a:	5c 01       	movw	r10, r24
 45c:	ee 84       	ldd	r14, Y+14	; 0x0e
 45e:	ff 84       	ldd	r15, Y+15	; 0x0f
 460:	1f 77       	andi	r17, 0x7F	; 127
 462:	18 c0       	rjmp	.+48     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 464:	97 01       	movw	r18, r14
 466:	2d 5f       	subi	r18, 0xFD	; 253
 468:	3f 4f       	sbci	r19, 0xFF	; 255
 46a:	3f 87       	std	Y+15, r19	; 0x0f
 46c:	2e 87       	std	Y+14, r18	; 0x0e
 46e:	f7 01       	movw	r30, r14
 470:	20 80       	ld	r2, Z
 472:	31 80       	ldd	r3, Z+1	; 0x01
 474:	42 80       	ldd	r4, Z+2	; 0x02
 476:	16 ff       	sbrs	r17, 6
 478:	03 c0       	rjmp	.+6      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 47a:	4b 2d       	mov	r20, r11
 47c:	50 e0       	ldi	r21, 0x00	; 0
 47e:	02 c0       	rjmp	.+4      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 480:	4f ef       	ldi	r20, 0xFF	; 255
 482:	5f ef       	ldi	r21, 0xFF	; 255
 484:	84 2d       	mov	r24, r4
 486:	b1 01       	movw	r22, r2
 488:	0e 94 81 05 	call	0xb02	; 0xb02 <strnlen>
 48c:	5c 01       	movw	r10, r24
 48e:	10 68       	ori	r17, 0x80	; 128
 490:	ee 84       	ldd	r14, Y+14	; 0x0e
 492:	ff 84       	ldd	r15, Y+15	; 0x0f
 494:	13 fd       	sbrc	r17, 3
 496:	1e c0       	rjmp	.+60     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 498:	80 2f       	mov	r24, r16
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	a8 16       	cp	r10, r24
 49e:	b9 06       	cpc	r11, r25
 4a0:	c8 f4       	brcc	.+50     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 4a2:	b6 01       	movw	r22, r12
 4a4:	80 e2       	ldi	r24, 0x20	; 32
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <fputc>
 4ac:	01 50       	subi	r16, 0x01	; 1
 4ae:	f4 cf       	rjmp	.-24     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 4b0:	f1 01       	movw	r30, r2
 4b2:	54 2d       	mov	r21, r4
 4b4:	0e 94 ef 05 	call	0xbde	; 0xbde <__xload_1>
 4b8:	86 2f       	mov	r24, r22
 4ba:	ff ef       	ldi	r31, 0xFF	; 255
 4bc:	2f 1a       	sub	r2, r31
 4be:	3f 0a       	sbc	r3, r31
 4c0:	4f 0a       	sbc	r4, r31
 4c2:	b6 01       	movw	r22, r12
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <fputc>
 4ca:	01 11       	cpse	r16, r1
 4cc:	01 50       	subi	r16, 0x01	; 1
 4ce:	21 e0       	ldi	r18, 0x01	; 1
 4d0:	a2 1a       	sub	r10, r18
 4d2:	b1 08       	sbc	r11, r1
 4d4:	a1 14       	cp	r10, r1
 4d6:	b1 04       	cpc	r11, r1
 4d8:	59 f7       	brne	.-42     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 4da:	f5 c0       	rjmp	.+490    	; 0x6c6 <__LOCK_REGION_LENGTH__+0x2c6>
 4dc:	84 36       	cpi	r24, 0x64	; 100
 4de:	11 f0       	breq	.+4      	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 4e0:	89 36       	cpi	r24, 0x69	; 105
 4e2:	71 f5       	brne	.+92     	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
 4e4:	f7 01       	movw	r30, r14
 4e6:	17 ff       	sbrs	r17, 7
 4e8:	08 c0       	rjmp	.+16     	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
 4ea:	60 81       	ld	r22, Z
 4ec:	71 81       	ldd	r23, Z+1	; 0x01
 4ee:	82 81       	ldd	r24, Z+2	; 0x02
 4f0:	93 81       	ldd	r25, Z+3	; 0x03
 4f2:	97 01       	movw	r18, r14
 4f4:	2c 5f       	subi	r18, 0xFC	; 252
 4f6:	3f 4f       	sbci	r19, 0xFF	; 255
 4f8:	09 c0       	rjmp	.+18     	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
 4fa:	60 81       	ld	r22, Z
 4fc:	71 81       	ldd	r23, Z+1	; 0x01
 4fe:	07 2e       	mov	r0, r23
 500:	00 0c       	add	r0, r0
 502:	88 0b       	sbc	r24, r24
 504:	99 0b       	sbc	r25, r25
 506:	97 01       	movw	r18, r14
 508:	2e 5f       	subi	r18, 0xFE	; 254
 50a:	3f 4f       	sbci	r19, 0xFF	; 255
 50c:	79 01       	movw	r14, r18
 50e:	1f 76       	andi	r17, 0x6F	; 111
 510:	31 2e       	mov	r3, r17
 512:	97 ff       	sbrs	r25, 7
 514:	0a c0       	rjmp	.+20     	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
 516:	90 95       	com	r25
 518:	80 95       	com	r24
 51a:	70 95       	com	r23
 51c:	61 95       	neg	r22
 51e:	7f 4f       	sbci	r23, 0xFF	; 255
 520:	8f 4f       	sbci	r24, 0xFF	; 255
 522:	9f 4f       	sbci	r25, 0xFF	; 255
 524:	31 2f       	mov	r19, r17
 526:	30 68       	ori	r19, 0x80	; 128
 528:	33 2e       	mov	r3, r19
 52a:	2a e0       	ldi	r18, 0x0A	; 10
 52c:	30 e0       	ldi	r19, 0x00	; 0
 52e:	ae 01       	movw	r20, r28
 530:	4f 5f       	subi	r20, 0xFF	; 255
 532:	5f 4f       	sbci	r21, 0xFF	; 255
 534:	0e 94 92 04 	call	0x924	; 0x924 <__ultoa_invert>
 538:	48 2e       	mov	r4, r24
 53a:	4c 85       	ldd	r20, Y+12	; 0x0c
 53c:	44 1a       	sub	r4, r20
 53e:	4a c0       	rjmp	.+148    	; 0x5d4 <__LOCK_REGION_LENGTH__+0x1d4>
 540:	85 37       	cpi	r24, 0x75	; 117
 542:	29 f4       	brne	.+10     	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
 544:	1f 7e       	andi	r17, 0xEF	; 239
 546:	a1 2e       	mov	r10, r17
 548:	2a e0       	ldi	r18, 0x0A	; 10
 54a:	30 e0       	ldi	r19, 0x00	; 0
 54c:	25 c0       	rjmp	.+74     	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
 54e:	51 2f       	mov	r21, r17
 550:	59 7f       	andi	r21, 0xF9	; 249
 552:	a5 2e       	mov	r10, r21
 554:	8f 36       	cpi	r24, 0x6F	; 111
 556:	c1 f0       	breq	.+48     	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
 558:	18 f4       	brcc	.+6      	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
 55a:	88 35       	cpi	r24, 0x58	; 88
 55c:	79 f0       	breq	.+30     	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
 55e:	bd c0       	rjmp	.+378    	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
 560:	80 37       	cpi	r24, 0x70	; 112
 562:	19 f0       	breq	.+6      	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
 564:	88 37       	cpi	r24, 0x78	; 120
 566:	21 f0       	breq	.+8      	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
 568:	b8 c0       	rjmp	.+368    	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
 56a:	85 2f       	mov	r24, r21
 56c:	80 61       	ori	r24, 0x10	; 16
 56e:	a8 2e       	mov	r10, r24
 570:	a4 fe       	sbrs	r10, 4
 572:	0d c0       	rjmp	.+26     	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
 574:	9a 2d       	mov	r25, r10
 576:	94 60       	ori	r25, 0x04	; 4
 578:	a9 2e       	mov	r10, r25
 57a:	09 c0       	rjmp	.+18     	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
 57c:	14 ff       	sbrs	r17, 4
 57e:	0a c0       	rjmp	.+20     	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
 580:	a5 2f       	mov	r26, r21
 582:	a6 60       	ori	r26, 0x06	; 6
 584:	aa 2e       	mov	r10, r26
 586:	06 c0       	rjmp	.+12     	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
 588:	28 e0       	ldi	r18, 0x08	; 8
 58a:	30 e0       	ldi	r19, 0x00	; 0
 58c:	05 c0       	rjmp	.+10     	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
 58e:	20 e1       	ldi	r18, 0x10	; 16
 590:	30 e0       	ldi	r19, 0x00	; 0
 592:	02 c0       	rjmp	.+4      	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
 594:	20 e1       	ldi	r18, 0x10	; 16
 596:	32 e0       	ldi	r19, 0x02	; 2
 598:	f7 01       	movw	r30, r14
 59a:	a7 fe       	sbrs	r10, 7
 59c:	08 c0       	rjmp	.+16     	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
 59e:	60 81       	ld	r22, Z
 5a0:	71 81       	ldd	r23, Z+1	; 0x01
 5a2:	82 81       	ldd	r24, Z+2	; 0x02
 5a4:	93 81       	ldd	r25, Z+3	; 0x03
 5a6:	a7 01       	movw	r20, r14
 5a8:	4c 5f       	subi	r20, 0xFC	; 252
 5aa:	5f 4f       	sbci	r21, 0xFF	; 255
 5ac:	07 c0       	rjmp	.+14     	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
 5ae:	60 81       	ld	r22, Z
 5b0:	71 81       	ldd	r23, Z+1	; 0x01
 5b2:	80 e0       	ldi	r24, 0x00	; 0
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	a7 01       	movw	r20, r14
 5b8:	4e 5f       	subi	r20, 0xFE	; 254
 5ba:	5f 4f       	sbci	r21, 0xFF	; 255
 5bc:	7a 01       	movw	r14, r20
 5be:	ae 01       	movw	r20, r28
 5c0:	4f 5f       	subi	r20, 0xFF	; 255
 5c2:	5f 4f       	sbci	r21, 0xFF	; 255
 5c4:	0e 94 92 04 	call	0x924	; 0x924 <__ultoa_invert>
 5c8:	48 2e       	mov	r4, r24
 5ca:	5c 85       	ldd	r21, Y+12	; 0x0c
 5cc:	45 1a       	sub	r4, r21
 5ce:	8a 2d       	mov	r24, r10
 5d0:	8f 77       	andi	r24, 0x7F	; 127
 5d2:	38 2e       	mov	r3, r24
 5d4:	36 fe       	sbrs	r3, 6
 5d6:	0d c0       	rjmp	.+26     	; 0x5f2 <__LOCK_REGION_LENGTH__+0x1f2>
 5d8:	93 2d       	mov	r25, r3
 5da:	9e 7f       	andi	r25, 0xFE	; 254
 5dc:	a9 2e       	mov	r10, r25
 5de:	4b 14       	cp	r4, r11
 5e0:	58 f4       	brcc	.+22     	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
 5e2:	34 fe       	sbrs	r3, 4
 5e4:	0b c0       	rjmp	.+22     	; 0x5fc <__LOCK_REGION_LENGTH__+0x1fc>
 5e6:	32 fc       	sbrc	r3, 2
 5e8:	09 c0       	rjmp	.+18     	; 0x5fc <__LOCK_REGION_LENGTH__+0x1fc>
 5ea:	a3 2d       	mov	r26, r3
 5ec:	ae 7e       	andi	r26, 0xEE	; 238
 5ee:	aa 2e       	mov	r10, r26
 5f0:	05 c0       	rjmp	.+10     	; 0x5fc <__LOCK_REGION_LENGTH__+0x1fc>
 5f2:	14 2d       	mov	r17, r4
 5f4:	a3 2c       	mov	r10, r3
 5f6:	03 c0       	rjmp	.+6      	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
 5f8:	14 2d       	mov	r17, r4
 5fa:	01 c0       	rjmp	.+2      	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
 5fc:	1b 2d       	mov	r17, r11
 5fe:	a4 fe       	sbrs	r10, 4
 600:	0e c0       	rjmp	.+28     	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
 602:	fe 01       	movw	r30, r28
 604:	e4 0d       	add	r30, r4
 606:	f1 1d       	adc	r31, r1
 608:	80 81       	ld	r24, Z
 60a:	80 33       	cpi	r24, 0x30	; 48
 60c:	21 f4       	brne	.+8      	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
 60e:	ea 2d       	mov	r30, r10
 610:	e9 7e       	andi	r30, 0xE9	; 233
 612:	ae 2e       	mov	r10, r30
 614:	08 c0       	rjmp	.+16     	; 0x626 <__LOCK_REGION_LENGTH__+0x226>
 616:	a2 fe       	sbrs	r10, 2
 618:	05 c0       	rjmp	.+10     	; 0x624 <__LOCK_REGION_LENGTH__+0x224>
 61a:	1e 5f       	subi	r17, 0xFE	; 254
 61c:	04 c0       	rjmp	.+8      	; 0x626 <__LOCK_REGION_LENGTH__+0x226>
 61e:	8a 2d       	mov	r24, r10
 620:	86 78       	andi	r24, 0x86	; 134
 622:	09 f0       	breq	.+2      	; 0x626 <__LOCK_REGION_LENGTH__+0x226>
 624:	1f 5f       	subi	r17, 0xFF	; 255
 626:	a3 fc       	sbrc	r10, 3
 628:	11 c0       	rjmp	.+34     	; 0x64c <__LOCK_REGION_LENGTH__+0x24c>
 62a:	a0 fe       	sbrs	r10, 0
 62c:	06 c0       	rjmp	.+12     	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
 62e:	10 17       	cp	r17, r16
 630:	88 f4       	brcc	.+34     	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
 632:	04 0d       	add	r16, r4
 634:	b0 2e       	mov	r11, r16
 636:	b1 1a       	sub	r11, r17
 638:	0e c0       	rjmp	.+28     	; 0x656 <__LOCK_REGION_LENGTH__+0x256>
 63a:	10 17       	cp	r17, r16
 63c:	60 f4       	brcc	.+24     	; 0x656 <__LOCK_REGION_LENGTH__+0x256>
 63e:	b6 01       	movw	r22, r12
 640:	80 e2       	ldi	r24, 0x20	; 32
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <fputc>
 648:	1f 5f       	subi	r17, 0xFF	; 255
 64a:	f7 cf       	rjmp	.-18     	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
 64c:	10 17       	cp	r17, r16
 64e:	18 f4       	brcc	.+6      	; 0x656 <__LOCK_REGION_LENGTH__+0x256>
 650:	01 1b       	sub	r16, r17
 652:	02 c0       	rjmp	.+4      	; 0x658 <__LOCK_REGION_LENGTH__+0x258>
 654:	b4 2c       	mov	r11, r4
 656:	00 e0       	ldi	r16, 0x00	; 0
 658:	a4 fe       	sbrs	r10, 4
 65a:	10 c0       	rjmp	.+32     	; 0x67c <__LOCK_REGION_LENGTH__+0x27c>
 65c:	b6 01       	movw	r22, r12
 65e:	80 e3       	ldi	r24, 0x30	; 48
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <fputc>
 666:	a2 fe       	sbrs	r10, 2
 668:	17 c0       	rjmp	.+46     	; 0x698 <__LOCK_REGION_LENGTH__+0x298>
 66a:	a1 fc       	sbrc	r10, 1
 66c:	03 c0       	rjmp	.+6      	; 0x674 <__LOCK_REGION_LENGTH__+0x274>
 66e:	88 e7       	ldi	r24, 0x78	; 120
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	02 c0       	rjmp	.+4      	; 0x678 <__LOCK_REGION_LENGTH__+0x278>
 674:	88 e5       	ldi	r24, 0x58	; 88
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	b6 01       	movw	r22, r12
 67a:	0c c0       	rjmp	.+24     	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
 67c:	8a 2d       	mov	r24, r10
 67e:	86 78       	andi	r24, 0x86	; 134
 680:	59 f0       	breq	.+22     	; 0x698 <__LOCK_REGION_LENGTH__+0x298>
 682:	a1 fe       	sbrs	r10, 1
 684:	02 c0       	rjmp	.+4      	; 0x68a <__LOCK_REGION_LENGTH__+0x28a>
 686:	8b e2       	ldi	r24, 0x2B	; 43
 688:	01 c0       	rjmp	.+2      	; 0x68c <__LOCK_REGION_LENGTH__+0x28c>
 68a:	80 e2       	ldi	r24, 0x20	; 32
 68c:	a7 fc       	sbrc	r10, 7
 68e:	8d e2       	ldi	r24, 0x2D	; 45
 690:	b6 01       	movw	r22, r12
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <fputc>
 698:	4b 14       	cp	r4, r11
 69a:	38 f4       	brcc	.+14     	; 0x6aa <__LOCK_REGION_LENGTH__+0x2aa>
 69c:	b6 01       	movw	r22, r12
 69e:	80 e3       	ldi	r24, 0x30	; 48
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <fputc>
 6a6:	ba 94       	dec	r11
 6a8:	f7 cf       	rjmp	.-18     	; 0x698 <__LOCK_REGION_LENGTH__+0x298>
 6aa:	4a 94       	dec	r4
 6ac:	e1 e0       	ldi	r30, 0x01	; 1
 6ae:	f0 e0       	ldi	r31, 0x00	; 0
 6b0:	ec 0f       	add	r30, r28
 6b2:	fd 1f       	adc	r31, r29
 6b4:	e4 0d       	add	r30, r4
 6b6:	f1 1d       	adc	r31, r1
 6b8:	80 81       	ld	r24, Z
 6ba:	b6 01       	movw	r22, r12
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <fputc>
 6c2:	41 10       	cpse	r4, r1
 6c4:	f2 cf       	rjmp	.-28     	; 0x6aa <__LOCK_REGION_LENGTH__+0x2aa>
 6c6:	00 23       	and	r16, r16
 6c8:	09 f4       	brne	.+2      	; 0x6cc <__LOCK_REGION_LENGTH__+0x2cc>
 6ca:	2c ce       	rjmp	.-936    	; 0x324 <vfprintf+0x5e>
 6cc:	b6 01       	movw	r22, r12
 6ce:	80 e2       	ldi	r24, 0x20	; 32
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <fputc>
 6d6:	01 50       	subi	r16, 0x01	; 1
 6d8:	f6 cf       	rjmp	.-20     	; 0x6c6 <__LOCK_REGION_LENGTH__+0x2c6>
 6da:	f6 01       	movw	r30, r12
 6dc:	87 81       	ldd	r24, Z+7	; 0x07
 6de:	90 85       	ldd	r25, Z+8	; 0x08
 6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <__LOCK_REGION_LENGTH__+0x2e6>
 6e2:	8f ef       	ldi	r24, 0xFF	; 255
 6e4:	9f ef       	ldi	r25, 0xFF	; 255
 6e6:	62 96       	adiw	r28, 0x12	; 18
 6e8:	0f b6       	in	r0, 0x3f	; 63
 6ea:	f8 94       	cli
 6ec:	de bf       	out	0x3e, r29	; 62
 6ee:	0f be       	out	0x3f, r0	; 63
 6f0:	cd bf       	out	0x3d, r28	; 61
 6f2:	df 91       	pop	r29
 6f4:	cf 91       	pop	r28
 6f6:	1f 91       	pop	r17
 6f8:	0f 91       	pop	r16
 6fa:	ff 90       	pop	r15
 6fc:	ef 90       	pop	r14
 6fe:	df 90       	pop	r13
 700:	cf 90       	pop	r12
 702:	bf 90       	pop	r11
 704:	af 90       	pop	r10
 706:	9f 90       	pop	r9
 708:	8f 90       	pop	r8
 70a:	7f 90       	pop	r7
 70c:	6f 90       	pop	r6
 70e:	4f 90       	pop	r4
 710:	3f 90       	pop	r3
 712:	2f 90       	pop	r2
 714:	08 95       	ret

Disassembly of section .text.avrlibc:

00000b02 <strnlen>:
 b02:	cf 92       	push	r12
 b04:	df 92       	push	r13
 b06:	ef 92       	push	r14
 b08:	6b 01       	movw	r12, r22
 b0a:	e8 2e       	mov	r14, r24
 b0c:	9a 01       	movw	r18, r20
 b0e:	a8 2f       	mov	r26, r24
 b10:	cb 01       	movw	r24, r22
 b12:	21 15       	cp	r18, r1
 b14:	31 05       	cpc	r19, r1
 b16:	31 f4       	brne	.+12     	; 0xb24 <strnlen+0x22>
 b18:	8c 19       	sub	r24, r12
 b1a:	9d 09       	sbc	r25, r13
 b1c:	ef 90       	pop	r14
 b1e:	df 90       	pop	r13
 b20:	cf 90       	pop	r12
 b22:	08 95       	ret
 b24:	fc 01       	movw	r30, r24
 b26:	5a 2f       	mov	r21, r26
 b28:	0e 94 ef 05 	call	0xbde	; 0xbde <__xload_1>
 b2c:	66 23       	and	r22, r22
 b2e:	a1 f3       	breq	.-24     	; 0xb18 <strnlen+0x16>
 b30:	01 96       	adiw	r24, 0x01	; 1
 b32:	a1 1d       	adc	r26, r1
 b34:	21 50       	subi	r18, 0x01	; 1
 b36:	31 09       	sbc	r19, r1
 b38:	ec cf       	rjmp	.-40     	; 0xb12 <strnlen+0x10>

Disassembly of section .text.avrlibc:

000009e0 <fputc>:
 9e0:	0f 93       	push	r16
 9e2:	1f 93       	push	r17
 9e4:	cf 93       	push	r28
 9e6:	df 93       	push	r29
 9e8:	fb 01       	movw	r30, r22
 9ea:	24 81       	ldd	r18, Z+4	; 0x04
 9ec:	21 fd       	sbrc	r18, 1
 9ee:	03 c0       	rjmp	.+6      	; 0x9f6 <fputc+0x16>
 9f0:	8f ef       	ldi	r24, 0xFF	; 255
 9f2:	9f ef       	ldi	r25, 0xFF	; 255
 9f4:	2c c0       	rjmp	.+88     	; 0xa4e <fputc+0x6e>
 9f6:	22 ff       	sbrs	r18, 2
 9f8:	16 c0       	rjmp	.+44     	; 0xa26 <fputc+0x46>
 9fa:	47 81       	ldd	r20, Z+7	; 0x07
 9fc:	50 85       	ldd	r21, Z+8	; 0x08
 9fe:	25 81       	ldd	r18, Z+5	; 0x05
 a00:	36 81       	ldd	r19, Z+6	; 0x06
 a02:	42 17       	cp	r20, r18
 a04:	53 07       	cpc	r21, r19
 a06:	44 f4       	brge	.+16     	; 0xa18 <fputc+0x38>
 a08:	a0 81       	ld	r26, Z
 a0a:	b1 81       	ldd	r27, Z+1	; 0x01
 a0c:	9d 01       	movw	r18, r26
 a0e:	2f 5f       	subi	r18, 0xFF	; 255
 a10:	3f 4f       	sbci	r19, 0xFF	; 255
 a12:	31 83       	std	Z+1, r19	; 0x01
 a14:	20 83       	st	Z, r18
 a16:	8c 93       	st	X, r24
 a18:	27 81       	ldd	r18, Z+7	; 0x07
 a1a:	30 85       	ldd	r19, Z+8	; 0x08
 a1c:	2f 5f       	subi	r18, 0xFF	; 255
 a1e:	3f 4f       	sbci	r19, 0xFF	; 255
 a20:	30 87       	std	Z+8, r19	; 0x08
 a22:	27 83       	std	Z+7, r18	; 0x07
 a24:	14 c0       	rjmp	.+40     	; 0xa4e <fputc+0x6e>
 a26:	8b 01       	movw	r16, r22
 a28:	ec 01       	movw	r28, r24
 a2a:	fb 01       	movw	r30, r22
 a2c:	01 84       	ldd	r0, Z+9	; 0x09
 a2e:	f2 85       	ldd	r31, Z+10	; 0x0a
 a30:	e0 2d       	mov	r30, r0
 a32:	19 95       	eicall
 a34:	89 2b       	or	r24, r25
 a36:	e1 f6       	brne	.-72     	; 0x9f0 <fputc+0x10>
 a38:	d8 01       	movw	r26, r16
 a3a:	17 96       	adiw	r26, 0x07	; 7
 a3c:	8d 91       	ld	r24, X+
 a3e:	9c 91       	ld	r25, X
 a40:	18 97       	sbiw	r26, 0x08	; 8
 a42:	01 96       	adiw	r24, 0x01	; 1
 a44:	18 96       	adiw	r26, 0x08	; 8
 a46:	9c 93       	st	X, r25
 a48:	8e 93       	st	-X, r24
 a4a:	17 97       	sbiw	r26, 0x07	; 7
 a4c:	ce 01       	movw	r24, r28
 a4e:	df 91       	pop	r29
 a50:	cf 91       	pop	r28
 a52:	1f 91       	pop	r17
 a54:	0f 91       	pop	r16
 a56:	08 95       	ret

Disassembly of section .text.avrlibc:

00000924 <__ultoa_invert>:
 924:	fa 01       	movw	r30, r20
 926:	aa 27       	eor	r26, r26
 928:	28 30       	cpi	r18, 0x08	; 8
 92a:	51 f1       	breq	.+84     	; 0x980 <__ultoa_invert+0x5c>
 92c:	20 31       	cpi	r18, 0x10	; 16
 92e:	81 f1       	breq	.+96     	; 0x990 <__ultoa_invert+0x6c>
 930:	e8 94       	clt
 932:	6f 93       	push	r22
 934:	6e 7f       	andi	r22, 0xFE	; 254
 936:	6e 5f       	subi	r22, 0xFE	; 254
 938:	7f 4f       	sbci	r23, 0xFF	; 255
 93a:	8f 4f       	sbci	r24, 0xFF	; 255
 93c:	9f 4f       	sbci	r25, 0xFF	; 255
 93e:	af 4f       	sbci	r26, 0xFF	; 255
 940:	b1 e0       	ldi	r27, 0x01	; 1
 942:	3e d0       	rcall	.+124    	; 0x9c0 <__ultoa_invert+0x9c>
 944:	b4 e0       	ldi	r27, 0x04	; 4
 946:	3c d0       	rcall	.+120    	; 0x9c0 <__ultoa_invert+0x9c>
 948:	67 0f       	add	r22, r23
 94a:	78 1f       	adc	r23, r24
 94c:	89 1f       	adc	r24, r25
 94e:	9a 1f       	adc	r25, r26
 950:	a1 1d       	adc	r26, r1
 952:	68 0f       	add	r22, r24
 954:	79 1f       	adc	r23, r25
 956:	8a 1f       	adc	r24, r26
 958:	91 1d       	adc	r25, r1
 95a:	a1 1d       	adc	r26, r1
 95c:	6a 0f       	add	r22, r26
 95e:	71 1d       	adc	r23, r1
 960:	81 1d       	adc	r24, r1
 962:	91 1d       	adc	r25, r1
 964:	a1 1d       	adc	r26, r1
 966:	20 d0       	rcall	.+64     	; 0x9a8 <__ultoa_invert+0x84>
 968:	09 f4       	brne	.+2      	; 0x96c <__ultoa_invert+0x48>
 96a:	68 94       	set
 96c:	3f 91       	pop	r19
 96e:	2a e0       	ldi	r18, 0x0A	; 10
 970:	26 9f       	mul	r18, r22
 972:	11 24       	eor	r1, r1
 974:	30 19       	sub	r19, r0
 976:	30 5d       	subi	r19, 0xD0	; 208
 978:	31 93       	st	Z+, r19
 97a:	de f6       	brtc	.-74     	; 0x932 <__ultoa_invert+0xe>
 97c:	cf 01       	movw	r24, r30
 97e:	08 95       	ret
 980:	46 2f       	mov	r20, r22
 982:	47 70       	andi	r20, 0x07	; 7
 984:	40 5d       	subi	r20, 0xD0	; 208
 986:	41 93       	st	Z+, r20
 988:	b3 e0       	ldi	r27, 0x03	; 3
 98a:	0f d0       	rcall	.+30     	; 0x9aa <__ultoa_invert+0x86>
 98c:	c9 f7       	brne	.-14     	; 0x980 <__ultoa_invert+0x5c>
 98e:	f6 cf       	rjmp	.-20     	; 0x97c <__ultoa_invert+0x58>
 990:	46 2f       	mov	r20, r22
 992:	4f 70       	andi	r20, 0x0F	; 15
 994:	40 5d       	subi	r20, 0xD0	; 208
 996:	4a 33       	cpi	r20, 0x3A	; 58
 998:	18 f0       	brcs	.+6      	; 0x9a0 <__ultoa_invert+0x7c>
 99a:	49 5d       	subi	r20, 0xD9	; 217
 99c:	31 fd       	sbrc	r19, 1
 99e:	40 52       	subi	r20, 0x20	; 32
 9a0:	41 93       	st	Z+, r20
 9a2:	02 d0       	rcall	.+4      	; 0x9a8 <__ultoa_invert+0x84>
 9a4:	a9 f7       	brne	.-22     	; 0x990 <__ultoa_invert+0x6c>
 9a6:	ea cf       	rjmp	.-44     	; 0x97c <__ultoa_invert+0x58>
 9a8:	b4 e0       	ldi	r27, 0x04	; 4
 9aa:	a6 95       	lsr	r26
 9ac:	97 95       	ror	r25
 9ae:	87 95       	ror	r24
 9b0:	77 95       	ror	r23
 9b2:	67 95       	ror	r22
 9b4:	ba 95       	dec	r27
 9b6:	c9 f7       	brne	.-14     	; 0x9aa <__ultoa_invert+0x86>
 9b8:	00 97       	sbiw	r24, 0x00	; 0
 9ba:	61 05       	cpc	r22, r1
 9bc:	71 05       	cpc	r23, r1
 9be:	08 95       	ret
 9c0:	9b 01       	movw	r18, r22
 9c2:	ac 01       	movw	r20, r24
 9c4:	0a 2e       	mov	r0, r26
 9c6:	06 94       	lsr	r0
 9c8:	57 95       	ror	r21
 9ca:	47 95       	ror	r20
 9cc:	37 95       	ror	r19
 9ce:	27 95       	ror	r18
 9d0:	ba 95       	dec	r27
 9d2:	c9 f7       	brne	.-14     	; 0x9c6 <__ultoa_invert+0xa2>
 9d4:	62 0f       	add	r22, r18
 9d6:	73 1f       	adc	r23, r19
 9d8:	84 1f       	adc	r24, r20
 9da:	95 1f       	adc	r25, r21
 9dc:	a0 1d       	adc	r26, r0
 9de:	08 95       	ret

Disassembly of section .text.libgcc:

00000bde <__xload_1>:
 bde:	57 fd       	sbrc	r21, 7
 be0:	03 c0       	rjmp	.+6      	; 0xbe8 <__xload_1+0xa>
 be2:	5b bf       	out	0x3b, r21	; 59
 be4:	67 91       	elpm	r22, Z+
 be6:	08 95       	ret
 be8:	60 81       	ld	r22, Z
 bea:	08 95       	ret
